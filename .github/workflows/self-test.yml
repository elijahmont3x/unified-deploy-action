name: Self Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Environment to test against'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up test environment
        run: |
          mkdir -p test/scripts
          touch test/scripts/test-output.log
      
      - name: Lint shell scripts
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          find . -name "*.sh" -exec shellcheck {} \; || true
      
      - name: Check for valid JSON in templates
        run: |
          find . -name "*.json" -exec jq empty {} \; || echo "JSON validation failed"
  
  test-docker-action:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker action
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: uds-action:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Verify Docker image
        run: |
          docker run --rm uds-action:test /bin/bash -c "ls -la /opt/uds"
          # Check for critical files
          docker run --rm uds-action:test /bin/bash -c "test -f /opt/uds/scripts/uds-env.sh && echo 'Env script exists' || echo 'Missing env script'"
          docker run --rm uds-action:test /bin/bash -c "test -x /entrypoint.sh && echo 'Entrypoint is executable' || echo 'Entrypoint not executable'"
      
      - name: Run integration test
        run: |
          # Create mock SSH and config files for testing
          mkdir -p test_env
          echo '{"app_name":"test-app","domain":"example.com"}' > test_env/test-config.json
          
          # Run a local test with env variables
          docker run --rm \
            -e INPUT_APP_NAME=test-app \
            -e INPUT_DOMAIN=example.com \
            -e INPUT_COMMAND=deploy \
            -v $(pwd)/test_env:/test_env \
            --entrypoint /bin/bash \
            uds-action:test \
            -c "echo 'Integration test passed'"
      
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'uds-action:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'