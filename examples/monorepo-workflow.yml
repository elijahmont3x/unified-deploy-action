name: Monorepo Deploy with UDS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      api: ${{ steps.filter.outputs.api }}
      database: ${{ steps.filter.outputs.database }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            api:
              - 'api/**'
            database:
              - 'database/**'
  
  build-frontend:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }},ghcr.io/${{ github.repository }}/frontend:latest
  
  build-api:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/${{ github.repository }}/api:${{ github.sha }},ghcr.io/${{ github.repository }}/api:latest
  
  deploy-database:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.database == 'true' && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy database
        uses: elijahmont3x/unified-deploy-action@v1
        with:
          command: deploy
          app-name: database
          image: postgres
          tag: latest
          domain: ${{ secrets.DOMAIN_NAME }}
          persistent: true
          port: 5432
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          volumes: ./database/init:/docker-entrypoint-initdb.d
          env-vars: >
            {
              "POSTGRES_USER": "${{ secrets.DB_USER }}",
              "POSTGRES_PASSWORD": "${{ secrets.DB_PASSWORD }}",
              "POSTGRES_DB": "${{ secrets.DB_NAME }}"
            }
  
  deploy-api:
    needs: [detect-changes, build-api, deploy-database]
    if: ${{ needs.detect-changes.outputs.api == 'true' && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy API
        uses: elijahmont3x/unified-deploy-action@v1
        with:
          command: deploy
          app-name: api
          image: ghcr.io/${{ github.repository }}/api
          tag: ${{ github.sha }}
          domain: ${{ secrets.DOMAIN_NAME }}
          route-type: subdomain
          route: api
          port: 3000
          ssl: true
          ssl-email: ${{ secrets.SSL_EMAIL }}
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          env-vars: >
            {
              "NODE_ENV": "production",
              "PORT": "3000",
              "DATABASE_URL": "postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@database:5432/${{ secrets.DB_NAME }}",
              "API_KEY": "${{ secrets.API_KEY }}"
            }
  
  deploy-frontend:
    needs: [detect-changes, build-frontend, deploy-api]
    if: ${{ needs.detect-changes.outputs.frontend == 'true' && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy frontend
        uses: elijahmont3x/unified-deploy-action@v1
        with:
          command: deploy
          app-name: frontend
          image: ghcr.io/${{ github.repository }}/frontend
          tag: ${{ github.sha }}
          domain: ${{ secrets.DOMAIN_NAME }}
          route-type: path
          route: /
          port: 80
          ssl: true
          ssl-email: ${{ secrets.SSL_EMAIL }}
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          env-vars: >
            {
              "NODE_ENV": "production",
              "REACT_APP_API_URL": "https://api.${{ secrets.DOMAIN_NAME }}"
            }